def project = [:]
project.config    = 'hmpps-env-configs'
project.mis       = 'hmpps-mis-terraform-repo'


parameters {
  booleanParam(name: 'deploy_DatabaseStandBy1', defaultValue: true, description: 'Deploy/update Database StandBy 1?')
  booleanParam(name: 'deploy_DatabaseStandBy2', defaultValue: true, description: 'Deploy/update Database StandBy 2?')
}      


def prepare_env() {
    sh '''
    #!/usr/env/bin bash
    docker pull mojdigitalstudio/hmpps-terraform-builder:latest
    '''
}

def plan_submodule(config_dir, env_name, git_project_dir, submodule_name) {
    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
        sh """
        #!/usr/env/bin bash
        echo "TF PLAN for ${env_name} | ${submodule_name} - component from git project ${git_project_dir}"
        set +e
        cp -R -n "${config_dir}" "${git_project_dir}/env_configs"
        cd "${git_project_dir}"
        docker run --rm \
        -v `pwd`:/home/tools/data \
        -v ~/.aws:/home/tools/.aws mojdigitalstudio/hmpps-terraform-builder \
        bash -c "\
            source env_configs/${env_name}/${env_name}.properties; \
            cd ${submodule_name}; \
            if [ -d .terraform ]; then rm -rf .terraform; fi; sleep 5; \
            terragrunt init; \
            terragrunt plan -detailed-exitcode --out ${env_name}.plan > tf.plan.out; \
            exitcode=\\\"\\\$?\\\"; \
            cat tf.plan.out; \
            if [ \\\"\\\$exitcode\\\" == '1' ]; then exit 1; fi; \
            if [ \\\"\\\$exitcode\\\" == '2' ]; then \
                    parse-terraform-plan -i tf.plan.out | jq '.changedResources[] | (.action != \\\"update\\\") or (.changedAttributes | to_entries | map(.key != \\\"tags.source-hash\\\") | reduce .[] as \\\$item (false; . or \\\$item))' | jq -e -s 'reduce .[] as \\\$item (false; . or \\\$item) == false'; \
                    if [ \\\"\\\$?\\\" == '1' ]; then exitcode=2 ; else exitcode=3; fi; \
            fi; \
            echo \\\"\\\$exitcode\\\" > plan_ret;" \
            || exitcode="\$?"; \
            if [ "\$exitcode" == '1' ]; then exit 1; else exit 0; fi
        set -e
        """
        return readFile("${git_project_dir}/${submodule_name}/plan_ret").trim()
    }
}

def apply_submodule(config_dir, env_name, git_project_dir, submodule_name) {
    wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
        sh """
        #!/usr/env/bin bash
        echo "TF APPLY for ${env_name} | ${submodule_name} - component from git project ${git_project_dir}"
        set +e
        cp -R -n "${config_dir}" "${git_project_dir}/env_configs"
        cd "${git_project_dir}"
        docker run --rm \
          -v `pwd`:/home/tools/data \
          -v ~/.aws:/home/tools/.aws mojdigitalstudio/hmpps-terraform-builder \
          bash -c " \
              source env_configs/${env_name}/${env_name}.properties; \
              cd ${submodule_name}; \
              terragrunt apply ${env_name}.plan; \
              tgexitcode=\\\$?; \
              echo \\\"TG exited with code \\\$tgexitcode\\\"; \
              if [ \\\$tgexitcode -ne 0 ]; then \
                exit  \\\$tgexitcode; \
              else \
                exit 0; \
              fi;"; \
        dockerexitcode=\$?; \
        echo "Docker step exited with code \$dockerexitcode"; \
        if [ \$dockerexitcode -ne 0 ]; then exit \$dockerexitcode; else exit 0; fi;
        set -e
        """
    }
}

def confirm() {
    try {
        timeout(time: 15, unit: 'MINUTES') {

            env.Continue = input(
                id: 'Proceed1', message: 'Apply plan?', parameters: [
                    [$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Apply Terraform']
                ]
            )
        }
    } catch(err) { // timeout reached or input false
        def user = err.getCauses()[0].getUser()
        env.Continue = false
        if('SYSTEM' == user.toString()) { // SYSTEM means timeout.
            echo "Timeout"
            error("Build failed because confirmation timed out")
        } else {
            echo "Aborted by: [${user}]"
        }
    }
}

def do_terraform(config_dir, env_name, git_project, component) {
    plancode = plan_submodule(config_dir, env_name, git_project, component)
    if (plancode == "2") {
        if ("${confirmation}" == "true") {
           confirm()
        } else {
            env.Continue = true
        }
        if (env.Continue == "true") {
           apply_submodule(config_dir, env_name, git_project, component)
        }
    }
    else if (plancode == "3") {
        apply_submodule(config_dir, env_name, git_project, component)
        env.Continue = true
    }
    else {
        env.Continue = true
    }
}

def debug_env() {
    sh '''
    #!/usr/env/bin bash
    pwd
    ls -al
    '''
}

pipeline {

    agent { label "jenkins_slave" }

    parameters {
         booleanParam(name: 'deploy_DATABASE_HA', defaultValue: true, description: 'Deploy/update Database High Availibilty?')
    }

    stages {

        stage('setup') {
            steps {
                slackSend(message: "\"Apply\" started on \"${environment_name}\" - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL.replace(':8080','')}|Open>)")

                dir( project.mis ) {
                  git url: 'git@github.com:ministryofjustice/' + project.mis, branch: 'master', credentialsId: 'f44bc5f1-30bd-4ab9-ad61-cc32caf1562a'
                }
                dir( project.config ) {
                  git url: 'git@github.com:ministryofjustice/' + project.config, branch: 'master', credentialsId: 'f44bc5f1-30bd-4ab9-ad61-cc32caf1562a'
                }

                prepare_env()
            }
        }

     stage('Delius | MIS Common')          { steps { script {do_terraform(project.config, environment_name, project.mis, 'common')}}}
     stage('Delius | MIS Certs')           { steps { script {do_terraform(project.config, environment_name, project.mis, 'certs')}}}
     stage('Delius | MIS s3buckets')       { steps { script {do_terraform(project.config, environment_name, project.mis, 's3buckets')}}}
     stage('Delius | MIS iam')             { steps { script {do_terraform(project.config, environment_name, project.mis, 'iam')}}}
     stage('Delius | MIS security-groups') { steps { script {do_terraform(project.config, environment_name, project.mis, 'security-groups')}}}
     stage('Delius | MIS Nextcloud')       { steps { script {do_terraform(project.config, environment_name, project.mis, 'nextcloud')}}}
     
     stage('Provision Databases - Primaries') {
       parallel {
         stage('Delius | MIS database_mis_primary')     { 
            steps { script { do_terraform(project.config, environment_name, project.mis, 'database_mis/server-mis-db-1') }
            }
         }

         stage('Delius | MIS database_misboe_primary')     { 
            steps { script { do_terraform(project.config, environment_name, project.mis, 'database_misboe/server-misboe-db-1') }
            }
         }

         stage('Delius | MIS database_misdsd_primary')     { 
            steps { script { do_terraform(project.config, environment_name, project.mis, 'database_misdsd/server-misdsd-db-1') }
            }
         }
       }
     }

     stage('Provision Databases - Standby 1') {
       when { expression { return (params.deploy_DATABASE_HA && params.deploy_DatabaseStandBy1) } }  
       parallel {
         stage('Delius | MIS database_mis_standby1')     { 
            steps { script { do_terraform(project.config, environment_name, project.mis, 'database_mis/server-mis-db-2') }
            }
         }

         stage('Delius | MIS database_misboe_standby1')     { 
            steps { script { do_terraform(project.config, environment_name, project.mis, 'database_misboe/server-misboe-db-2') }
            }
         }

         stage('Delius | MIS database_misdsd_standby1')     { 
            steps { script { do_terraform(project.config, environment_name, project.mis, 'database_misdsd/server-misdsd-db-2') }
            }
         }
       }
     }

     stage('Provision Databases - Standby 2') {
       when { expression { return (params.deploy_DATABASE_HA && params.deploy_DatabaseStandBy2) } }  
       parallel {
         stage('Delius | MIS database_mis_standby2')     { 
            steps { script { do_terraform(project.config, environment_name, project.mis, 'database_mis/server-mis-db-3') }
            }
         }

         stage('Delius | MIS database_misboe_standby2')     { 
            steps { script { do_terraform(project.config, environment_name, project.mis, 'database_misboe/server-misboe-db-3') }
            }
         }

         stage('Delius | MIS database_misdsd_standby2')     { 
            steps { script { do_terraform(project.config, environment_name, project.mis, 'database_misdsd/server-misdsd-db-3') }
            }
         }
       }
     }

     stage('Check Oracle Software Patches on Primary') {
       parallel {
         stage('Delius | Check MIS database_mis') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    build job: "Ops/Oracle_Operations/Patch_Oracle_Software", 
                    parameters: [
                       [$class: 'StringParameterValue', name: 'environment_name', value: "${environment_name}"],
                       [$class: 'StringParameterValue', name: 'target_host', value: 'mis_primarydb'],
                       [$class: 'BooleanParameterValue', name: 'install_absent_patches', value: false],
                       [$class: 'StringParameterValue', name: 'patch_id', value: 'ALL']
                    ]}
            }
         } 
         stage('Delius | Check MIS database_misboe') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    build job: "Ops/Oracle_Operations/Patch_Oracle_Software", 
                    parameters: [
                       [$class: 'StringParameterValue', name: 'environment_name', value: "${environment_name}"],
                       [$class: 'StringParameterValue', name: 'target_host', value: 'misboe_primarydb'],
                       [$class: 'BooleanParameterValue', name: 'install_absent_patches', value: false],
                       [$class: 'StringParameterValue', name: 'patch_id', value: 'ALL']
                    ]
                }
            }
         }
         stage('Delius | Check MIS database_misdsd') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    build job: "Ops/Oracle_Operations/Patch_Oracle_Software", 
                    parameters: [
                       [$class: 'StringParameterValue', name: 'environment_name', value: "${environment_name}"],
                       [$class: 'StringParameterValue', name: 'target_host', value: 'misdsd_primarydb'],
                       [$class: 'BooleanParameterValue', name: 'install_absent_patches', value: false],
                       [$class: 'StringParameterValue', name: 'patch_id', value: 'ALL']
                    ]
                }
            }
         }
       }
     }

     stage('Provision Servers') {
       parallel {
         stage('Delius | MIS ec2-ndl-dis') { steps { script {do_terraform(project.config, environment_name, project.mis, 'ec2-ndl-dis')}}}
         stage('Delius | MIS ec2-ndl-bcs') { steps { script {do_terraform(project.config, environment_name, project.mis, 'ec2-ndl-bcs')}}}
         stage('Delius | MIS ec2-ndl-bfs') { steps { script {do_terraform(project.config, environment_name, project.mis, 'ec2-ndl-bfs')}}}
         stage('Delius | MIS ec2-ndl-bps') { steps { script {do_terraform(project.config, environment_name, project.mis, 'ec2-ndl-bps')}}}
         stage('Delius | MIS ec2-ndl-bws') { steps { script {do_terraform(project.config, environment_name, project.mis, 'ec2-ndl-bws')}}}
       }
     }
     stage('Build Database High Availability') {
       parallel {
         stage('Build MIS DB HA')    { 
             when { expression { return params.deploy_DATABASE_HA } }
             steps { build job: "DAMS/Environments/${environment_name}/MIS/Build_Oracle_DB_HA_MIS",
                parameters: [
                    [$class: 'StringParameterValue', name: 'environment_name', value: "${environment_name}"],
                    [$class: 'StringParameterValue', name: 'db_group', value: "mis"]
         ]}}
         stage('Build MISBOE DB HA') { 
             when { expression { return params.deploy_DATABASE_HA } }
             steps { build job: "DAMS/Environments/${environment_name}/MIS/Build_Oracle_DB_HA_MISBOE",
                parameters: [
                    [$class: 'StringParameterValue', name: 'environment_name', value: "${environment_name}"],
                    [$class: 'StringParameterValue', name: 'db_group', value: "misboe"]
         ]}}
         stage('Build MISDSD DB HA') { 
             when { expression { return params.deploy_DATABASE_HA } }
             steps { build job: "DAMS/Environments/${environment_name}/MIS/Build_Oracle_DB_HA_MISDSD",
                parameters: [
                    [$class: 'StringParameterValue', name: 'environment_name', value: "${environment_name}"],
                    [$class: 'StringParameterValue', name: 'db_group', value: "misdsd"]
         ]}}
       }
     }

     stage ('Check Oracle Software and Patches on HA') {
     parallel {

        stage('Check Oracle Software Patches on MIS DB HA 1') {
            when { expression { return params.deploy_DATABASE_HA && params.deploy_DatabaseStandBy1 } } 
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                build job: "Ops/Oracle_Operations/Patch_Oracle_Software", 
                parameters: [
                    [$class: 'StringParameterValue', name: 'environment_name', value: "${environment_name}"],
                    [$class: 'StringParameterValue', name: 'target_host', value: 'mis_standbydb1'],
                    [$class: 'BooleanParameterValue', name: 'install_absent_patches', value: false],
                    [$class: 'StringParameterValue', name: 'patch_id', value: 'ALL']]
                }
            }
        }
        stage('Check Oracle Software Patches on MIS DB HA 2') {
            when { expression { return params.deploy_DATABASE_HA && params.deploy_DatabaseStandBy2 } } 
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                build job: "Ops/Oracle_Operations/Patch_Oracle_Software", 
                parameters: [
                    [$class: 'StringParameterValue', name: 'environment_name', value: "${environment_name}"],
                    [$class: 'StringParameterValue', name: 'target_host', value: 'mis_standbydb2'],
                    [$class: 'BooleanParameterValue', name: 'install_absent_patches', value: false],
                    [$class: 'StringParameterValue', name: 'patch_id', value: 'ALL']]
                }
            }
        }
 
        stage('Check Oracle Software Patches on MISBOE DB HA 1') {
            when { expression { return params.deploy_DATABASE_HA && params.deploy_DatabaseStandBy1 } } 
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                build job: "Ops/Oracle_Operations/Patch_Oracle_Software", 
                parameters: [
                    [$class: 'StringParameterValue', name: 'environment_name', value: "${environment_name}"],
                    [$class: 'StringParameterValue', name: 'target_host', value: 'misboe_standbydb1'],
                    [$class: 'BooleanParameterValue', name: 'install_absent_patches', value: false],
                    [$class: 'StringParameterValue', name: 'patch_id', value: 'ALL']]
                }
            }
        }
        stage('Check Oracle Software Patches on MISBOE DB HA 2') {
            when { expression { return params.deploy_DATABASE_HA && params.deploy_DatabaseStandBy2 } } 
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                build job: "Ops/Oracle_Operations/Patch_Oracle_Software", 
                parameters: [
                    [$class: 'StringParameterValue', name: 'environment_name', value: "${environment_name}"],
                    [$class: 'StringParameterValue', name: 'target_host', value: 'misboe_standbydb2'],
                    [$class: 'BooleanParameterValue', name: 'install_absent_patches', value: false],
                    [$class: 'StringParameterValue', name: 'patch_id', value: 'ALL']]
                }
            }
        }

        stage('Check Oracle Software Patches on MISDSD DB HA 1') {
            when { expression { return params.deploy_DATABASE_HA && params.deploy_DatabaseStandBy1 } } 
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                build job: "Ops/Oracle_Operations/Patch_Oracle_Software", 
                parameters: [
                    [$class: 'StringParameterValue', name: 'environment_name', value: "${environment_name}"],
                    [$class: 'StringParameterValue', name: 'target_host', value: 'misdsd_standbydb1'],
                    [$class: 'BooleanParameterValue', name: 'install_absent_patches', value: false],
                    [$class: 'StringParameterValue', name: 'patch_id', value: 'ALL']]
                }
            }
        }
        stage('Check Oracle Software Patches on MISDSD DB HA 2') {
            when { expression { return params.deploy_DATABASE_HA && params.deploy_DatabaseStandBy2 } } 
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                build job: "Ops/Oracle_Operations/Patch_Oracle_Software", 
                parameters: [
                    [$class: 'StringParameterValue', name: 'environment_name', value: "${environment_name}"],
                    [$class: 'StringParameterValue', name: 'target_host', value: 'misdsd_standbydb2'],
                    [$class: 'BooleanParameterValue', name: 'install_absent_patches', value: false],
                    [$class: 'StringParameterValue', name: 'patch_id', value: 'ALL']]
                }
            }
        }
      }
    }

     stage('Delius | MIS monitoring')      { steps { script {do_terraform(project.config, environment_name, project.mis, 'monitoring')}}}
     stage('Smoke test') { steps { build job: "DAMS/Environments/${environment_name}/MIS/Smoke_test", parameters: [[$class: 'StringParameterValue', name: 'environment_name', value: "${environment_name}"]]}}
    }

    post {
        always {
            deleteDir()
        }
        success {
            slackSend(message: "\"Apply\" completed on \"${environment_name}\" - ${env.JOB_NAME} ${env.BUILD_NUMBER} ", color: 'good')
        }
        failure {
            slackSend(message: "\"Apply\" failed on \"${environment_name}\" - ${env.JOB_NAME} ${env.BUILD_NUMBER} ", color: 'danger')
        }
    }

}
